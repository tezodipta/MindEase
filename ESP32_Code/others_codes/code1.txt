[paste this code in src/main.cpp (static backend address,hold the button for input,starts dns for wifi id password)] 

// Libraries
#include <driver/i2s.h>
#include <SPIFFS.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <WebServer.h>
#include <DNSServer.h>
#include "config.h"

// INMP441 Ports
#define I2S_WS 5   // LRC
#define I2S_SD 19  // DOUT
#define I2S_SCK 18 // BCLK

// MAX98357A Ports
#define I2S_DOUT 22 // DIN
#define I2S_BCLK 15 // BCLK
#define I2S_LRC 21  // LRC

// Wake-up Button
#define Button_Pin GPIO_NUM_4

// LED Ports
#define isWifiConnectedPin 25
#define isAudioRecording 32
#define BUILTIN_LED 2 // GPIO 2 is the standard built-in LED pin for most ESP32 boards

// AP Mode Configuration
#define AP_SSID "MideEase_Config"
#define AP_PASSWORD "12345678"
#define AP_CONFIG_TIMEOUT 300000 // 5 minutes timeout for configuration

// DNS and webserver for captive portal
const byte DNS_PORT = 53;
IPAddress apIP(192, 168, 4, 1);
DNSServer dnsServer;
WebServer webServer(80);

// Configuration variables
String configSSID = "";
String configPassword = "";
String configServerIP = "";
bool configComplete = false;

unsigned long lastButtonPressTime = 0;
const unsigned long debounceTime = 500; // 500ms debounce
volatile bool workflowInProgress = false;

// MAX98357A I2S Setup
#define MAX_I2S_NUM I2S_NUM_1
#define MAX_I2S_SAMPLE_BITS (16)
#define MAX_I2S_READ_LEN (256)
#define MAX_I2S_SAMPLE_RATE (16000) // Changed from 12000 to match recording rate
// INMP441 I2S Setup
#define I2S_PORT I2S_NUM_0
#define I2S_SAMPLE_RATE (16000)
#define I2S_SAMPLE_BITS (16)
#define I2S_READ_LEN (16 * 1024)
#define RECORD_TIME (5) // Seconds
#define I2S_CHANNEL_NUM (1)
#define FLASH_RECORD_SIZE (I2S_CHANNEL_NUM * I2S_SAMPLE_RATE * I2S_SAMPLE_BITS / 8 * RECORD_TIME)

File file;
const char audioRecordfile[] = "/recording.wav";
const char audioResponsefile[] = "/voicedby.wav";
const int headerSize = 44;

bool isWIFIConnected = false;
volatile bool buttonPressed = false;

// Dynamic server URLs that will be updated based on configuration
String serverUploadUrl;
String serverBroadcastUrl;
String broadcastPermitionUrl;

// Function prototypes
void SPIFFSInit();
void listSPIFFS(void);
void i2sInitINMP441();
void i2sInitMax98357A();
void wavHeader(byte *header, int wavSize);
void I2SAudioRecord_dataScale(uint8_t *d_buff, uint8_t *s_buff, uint32_t len);
void printSpaceInfo();
bool connectToWifi();
void buttonInterrupt();
void handleVoiceAssistantWorkflow();
void recordAudio();
void uploadFile();
void waitForResponseAndPlay();
void startConfigPortal();
void handleRoot();
void handleSave();
void handleNotFound();
void updateServerUrls();

void setup()
{
  Serial.begin(115200);
  delay(500);

  // Set up LEDs
  pinMode(isWifiConnectedPin, OUTPUT);
  digitalWrite(isWifiConnectedPin, LOW);
  pinMode(isAudioRecording, OUTPUT);
  digitalWrite(isAudioRecording, LOW);
  pinMode(BUILTIN_LED, OUTPUT); // Set the pin as output
  digitalWrite(BUILTIN_LED, LOW);

  // Set up button with interrupt
  pinMode(Button_Pin, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(Button_Pin), buttonInterrupt, CHANGE);
  // Initialize SPIFFS
  SPIFFSInit();

  // Initialize I2S interfaces
  i2sInitINMP441();
  i2sInitMax98357A();

  // Start configuration portal
  startConfigPortal();

  // After configuration, connect to the configured WiFi
  if (configComplete)
  {
    isWIFIConnected = connectToWifi();
    if (isWIFIConnected)
    {
      updateServerUrls();
    }
  }

  Serial.println("Setup complete. Press button to start voice assistant.");
}

void updateServerUrls()
{
  // Use hardcoded Ngrok URL instead of IP-based URL
  String serverBaseUrl = "http://hornet-upright-ewe.ngrok-free.app";

  serverUploadUrl = serverBaseUrl + "/uploadAudio";
  serverBroadcastUrl = serverBaseUrl + "/broadcastAudio";
  broadcastPermitionUrl = serverBaseUrl + "/checkVariable";

  Serial.println("Server URLs updated:");
  Serial.println("Upload URL: " + serverUploadUrl);
  Serial.println("Broadcast URL: " + serverBroadcastUrl);
  Serial.println("Permission URL: " + broadcastPermitionUrl);
}

void startConfigPortal()
{
  Serial.println("Starting configuration portal...");

  // Set up AP mode
  WiFi.disconnect(true);
  delay(100);
  WiFi.mode(WIFI_AP);
  WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));
  WiFi.softAP(AP_SSID, AP_PASSWORD);

  // Start DNS server for captive portal
  dnsServer.start(DNS_PORT, "*", apIP);

  // Setup web server routes
  webServer.on("/", HTTP_GET, handleRoot);
  webServer.on("/save", HTTP_POST, handleSave);
  webServer.onNotFound(handleNotFound);
  webServer.begin();

  Serial.println("Configuration portal started!");
  Serial.println("Connect to WiFi network: " + String(AP_SSID));
  Serial.println("Password: " + String(AP_PASSWORD));
  Serial.println("Then navigate to http://192.168.4.1 to configure");

  // Blink LED to indicate config mode
  for (int i = 0; i < 5; i++)
  {
    digitalWrite(isWifiConnectedPin, HIGH);
    delay(100);
    digitalWrite(isWifiConnectedPin, LOW);
    delay(100);
  }

  // Wait for configuration or timeout
  unsigned long startTime = millis();
  while (!configComplete && (millis() - startTime < AP_CONFIG_TIMEOUT))
  {
    dnsServer.processNextRequest();
    webServer.handleClient();
    delay(10);
  }

  // If timed out without configuration, use defaults if available
  if (!configComplete)
  {
    Serial.println("Configuration portal timed out. Using default settings if available.");

// Check if config.h has WiFi credentials defined
#ifdef WIFI_SSID
    configSSID = WIFI_SSID;
    configPassword = WIFI_PASSWORD;
    configComplete = true;
#else
    Serial.println("No default settings available. Device may not function properly.");
#endif
  }

  // Stop AP mode properly
  webServer.stop();
  dnsServer.stop();
  WiFi.softAPdisconnect(true);

  // Switch mode and prepare for station connection
  WiFi.mode(WIFI_OFF);
  delay(500);
  WiFi.mode(WIFI_STA);
  delay(100);
}

void handleRoot()
{
  String html = "<!DOCTYPE html><html><head><title>MideEase Configuration</title>"
                "<meta name='viewport' content='width=device-width, initial-scale=1'>"
                "<style>"
                "body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }"
                ".container { max-width: 500px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }"
                "h1 { color: #333; text-align: center; margin-bottom: 20px; }"
                "label { display: block; margin-bottom: 5px; font-weight: bold; }"
                "input[type='text'], input[type='password'] { width: 100%; padding: 10px; margin-bottom: 20px; border: 1px solid #ddd; border-radius: 5px; box-sizing: border-box; }"
                "button { background-color: #4CAF50; color: white; border: none; padding: 10px 20px; text-align: center; font-size: 16px; border-radius: 5px; cursor: pointer; width: 100%; }"
                "button:hover { background-color: #45a049; }"
                ".hint { font-size: 12px; color: #666; margin-top: -15px; margin-bottom: 15px; }"
                "</style></head>"
                "<body><div class='container'>"
                "<h1>MideEase Configuration</h1>"
                "<form action='/save' method='post'>"
                "<label for='ssid'>WiFi Network Name:</label>"
                "<input type='text' id='ssid' name='ssid' placeholder='Enter your WiFi SSID' required>"
                "<label for='password'>WiFi Password:</label>"
                "<input type='password' id='password' name='password' placeholder='Enter your WiFi password' required>"
                "<div class='hint'>Password must be at least 8 characters</div>"
                "<button type='submit'>Save and Connect</button>"
                "</form></div></body></html>";
  webServer.send(200, "text/html", html);
}

void handleSave()
{
  if (webServer.hasArg("ssid") && webServer.hasArg("password"))
  {
    String ssid = webServer.arg("ssid");
    String password = webServer.arg("password");

    // Simple validation
    if (ssid.length() == 0 || password.length() < 8)
    {
      String errorHtml = "<!DOCTYPE html><html><head><title>Configuration Error</title>"
                         "<meta name='viewport' content='width=device-width, initial-scale=1'>"
                         "<style>body {font-family: Arial; text-align: center;} "
                         ".container {max-width: 400px; margin: 0 auto; padding: 20px; border: 1px solid #ccc;}"
                         "h1 {color: #f44336;}</style></head>"
                         "<body><div class='container'>"
                         "<h1>Configuration Error</h1>"
                         "<p>Please ensure all fields are filled correctly:</p>"
                         "<ul style='text-align: left;'>";

      if (ssid.length() == 0)
        errorHtml += "<li>SSID cannot be empty</li>";
      if (password.length() < 8)
        errorHtml += "<li>Password must be at least 8 characters</li>";

      errorHtml += "</ul><p><a href='/'>Back to Configuration</a></p></div></body></html>";

      webServer.send(400, "text/html", errorHtml);
      return;
    }

    // Save the configuration
    configSSID = ssid;
    configPassword = password;
    // Server URL is now hardcoded, so we don't need to save it

    String html = "<!DOCTYPE html><html><head><title>Configuration Saved</title>"
                  "<meta name='viewport' content='width=device-width, initial-scale=1'>"
                  "<style>"
                  "body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; text-align: center; }"
                  ".container { max-width: 500px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }"
                  "h1 { color: #4CAF50; }"
                  "p { margin-bottom: 20px; }"
                  ".loader { border: 5px solid #f3f3f3; border-top: 5px solid #4CAF50; border-radius: 50%; width: 50px; height: 50px; animation: spin 2s linear infinite; margin: 20px auto; }"
                  "@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }"
                  "</style></head>"
                  "<body><div class='container'>"
                  "<h1>Configuration Saved!</h1>"
                  "<p>The device will now attempt to connect to your WiFi network.</p>"
                  "<div class='loader'></div>"
                  "<p>You can close this page.</p>"
                  "</div></body></html>";
    webServer.send(200, "text/html", html);

    Serial.println("Configuration received:");
    Serial.println("SSID: " + configSSID);

    configComplete = true;
  }
  else
  {
    webServer.send(400, "text/plain", "Missing required parameters");
  }
}

void handleNotFound()
{
  // Check if the request is for a recognized file type
  String uri = webServer.uri();
  if (uri.endsWith(".css") || uri.endsWith(".js") || uri.endsWith(".ico") || uri.endsWith(".png"))
  {
    // For web resources, return a 404
    webServer.send(404, "text/plain", "File not found");
  }
  else
  {
    // For all other requests, redirect to the main configuration page
    // This creates a proper captive portal experience
    String redirectUrl = "http://192.168.4.1/";
    webServer.sendHeader("Location", redirectUrl, true);
    webServer.send(302, "text/plain", "");
  }
}

void loop()
{
  // If WiFi is disconnected, try to reconnect
  if (isWIFIConnected && WiFi.status() != WL_CONNECTED)
  {
    Serial.println("WiFi connection lost. Reconnecting...");
    isWIFIConnected = connectToWifi();
    if (!isWIFIConnected)
    {
      digitalWrite(isWifiConnectedPin, LOW);
    }
  }

  // Check button state directly rather than relying only on interrupt
  // This is more reliable for detecting longer presses
  if (digitalRead(Button_Pin) == LOW && !workflowInProgress)
  {
    digitalWrite(BUILTIN_LED, HIGH);
    Serial.println("Button press detected in main loop");
    workflowInProgress = true;
    handleVoiceAssistantWorkflow();
    workflowInProgress = false;

    // Add a delay after completing workflow to prevent immediate restart
    delay(1000);

    // Wait for button release to prevent retriggering
    while (digitalRead(Button_Pin) == LOW)
    {
      delay(10);
    }
    Serial.println("Button released after workflow");
    digitalWrite(BUILTIN_LED, LOW);
  }

  delay(100);
}

void IRAM_ATTR buttonInterrupt()
{
  unsigned long currentTime = millis();
  if (currentTime - lastButtonPressTime > debounceTime)
  {
    // Update the buttonPressed variable to reflect the current button state
    // LOW = pressed, HIGH = released
    buttonPressed = (digitalRead(Button_Pin) == LOW);
    lastButtonPressTime = currentTime;

    // Debug output (won't work in interrupt, but we'll add proper debugging later)
    // Serial.println(buttonPressed ? "Button pressed" : "Button released");
  }
}

bool connectToWifi()
{
  // Ensure WiFi is in station mode
  WiFi.mode(WIFI_STA);
  WiFi.disconnect(true);
  delay(100);

  Serial.print("Connecting to WiFi: ");

  // Use the configured WiFi credentials
  if (configComplete)
  {
    Serial.println(configSSID);
    WiFi.begin(configSSID.c_str(), configPassword.c_str());
  }
  else
  {
    // Fallback to config.h credentials if configuration wasn't completed
    Serial.println(WIFI_SSID);
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  }

  // Wait longer for connection - some networks take time
  int attempts = 0;
  const int maxAttempts = 30; // Increased from 20 to 30

  while (WiFi.status() != WL_CONNECTED && attempts < maxAttempts)
  {
    delay(500);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED)
  {
    digitalWrite(isWifiConnectedPin, HIGH);
    Serial.println("\nConnected to WiFi!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
    return true;
  }
  else
  {
    digitalWrite(isWifiConnectedPin, LOW);
    Serial.println("\nFailed to connect to WiFi!");
    Serial.println("SSID: " + (configComplete ? configSSID : String(WIFI_SSID)));
    Serial.println("Status code: " + String(WiFi.status()));
    return false;
  }
}

void SPIFFSInit()
{
  if (!SPIFFS.begin(true))
  {
    Serial.println("SPIFFS initialization failed!");
    while (1)
      yield();
  }
  Serial.println("SPIFFS initialized");

  // List files
  listSPIFFS();
}

void handleVoiceAssistantWorkflow()
{
  // Check WiFi and reconnect if needed
  if (WiFi.status() != WL_CONNECTED)
  {
    if (!connectToWifi())
    {
      Serial.println("Cannot proceed without WiFi connection");
      return;
    }
    isWIFIConnected = true;
  }

  // Wait for button to be fully pressed before continuing
  // This ensures we don't start and immediately stop recording
  Serial.println("Waiting for button to be stable...");
  delay(100); // Short delay to ensure button state is stable

  if (digitalRead(Button_Pin) != LOW)
  {
    Serial.println("Button was released too quickly. Aborting workflow.");
    workflowInProgress = false;
    return;
  }

  Serial.println("Button press confirmed. Starting workflow...");

  // Clean up any existing files
  if (SPIFFS.exists(audioRecordfile))
  {
    SPIFFS.remove(audioRecordfile);
  }
  if (SPIFFS.exists(audioResponsefile))
  {
    SPIFFS.remove(audioResponsefile);
  }

  // Calculate available space for recording
  size_t totalBytes = SPIFFS.totalBytes();
  size_t usedBytes = SPIFFS.usedBytes();
  size_t maxRecordSize = min(totalBytes - usedBytes - 1024, (size_t)FLASH_RECORD_SIZE); // Leave some buffer

  // Prepare recording file
  file = SPIFFS.open(audioRecordfile, FILE_WRITE);
  if (!file)
  {
    Serial.println("Failed to open file for writing");
    workflowInProgress = false;
    return;
  }

  // Write temporary WAV header - will update after recording
  byte header[headerSize];
  wavHeader(header, maxRecordSize);
  file.write(header, headerSize);

  // Record audio (will continue until button is released)
  recordAudio();

  // If file size is too small, abort the workflow
  file = SPIFFS.open(audioRecordfile, FILE_READ);
  size_t fileSize = file.size();
  file.close();

  if (fileSize <= headerSize + 1000)
  { // Less than 1KB of actual audio data
    Serial.println("Recording too short. Aborting workflow.");
    if (SPIFFS.exists(audioRecordfile))
    {
      SPIFFS.remove(audioRecordfile);
    }
    workflowInProgress = false;
    return;
  }

  // Get the actual recorded size and rewrite the header
  size_t actualRecordSize = fileSize - headerSize;

  // Close the original file
  file.close();

  // Create a temporary file for the correct header
  File tempFile = SPIFFS.open("/temp.wav", FILE_WRITE);
  if (tempFile)
  {
    // Write correct header to temp file
    wavHeader(header, actualRecordSize);
    tempFile.write(header, headerSize);
    tempFile.close();

    // Now open both files and copy data
    tempFile = SPIFFS.open("/temp.wav", FILE_READ);
    file = SPIFFS.open(audioRecordfile, FILE_READ);

    if (tempFile && file)
    {
      // Create the final file with correct header
      File finalFile = SPIFFS.open("/final.wav", FILE_WRITE);
      if (finalFile)
      {
        // Copy header from temp file
        uint8_t buffer[64];
        int bytesRead = tempFile.read(buffer, headerSize);
        finalFile.write(buffer, bytesRead);

        // Skip header in original file
        file.seek(headerSize);

        // Copy audio data from original file
        while (file.available())
        {
          bytesRead = file.read(buffer, sizeof(buffer));
          finalFile.write(buffer, bytesRead);
        }

        finalFile.close();
      }

      tempFile.close();
      file.close();

      // Remove original file and temp header file
      SPIFFS.remove(audioRecordfile);
      SPIFFS.remove("/temp.wav");

      // Rename final file to original name
      SPIFFS.rename("/final.wav", audioRecordfile);

      Serial.printf("Updated WAV header with actual size: %u bytes\n", actualRecordSize);
    }
  }

  // Rest of your existing header rewriting code...
  // ...

  // Upload to server
  uploadFile();

  // Clean up recording file to save space
  if (SPIFFS.exists(audioRecordfile))
  {
    SPIFFS.remove(audioRecordfile);
  }

  // Wait for response and play it
  waitForResponseAndPlay();

  // Clean up response file
  if (SPIFFS.exists(audioResponsefile))
  {
    SPIFFS.remove(audioResponsefile);
  }

  Serial.println("Workflow completed. Ready for next button press.");
}

void recordAudio()
{
  digitalWrite(isAudioRecording, HIGH);
  Serial.println(" *** Get Ready to Speak *** ");

  // Initialize buffer for flushing
  int i2s_read_len = I2S_READ_LEN;
  size_t bytes_read;
  char *flush_buff = (char *)calloc(i2s_read_len, sizeof(char));

  // Flush the I2S buffer multiple times to clear any previous audio
  for (int i = 0; i < 5; i++)
  {
    i2s_read(I2S_PORT, (void *)flush_buff, i2s_read_len, &bytes_read, portMAX_DELAY);
  }
  free(flush_buff);

  // Add a short delay before starting
  delay(500);

  Serial.println(" *** Recording Start *** ");
  Serial.println("Keep button pressed to continue recording...");

  int flash_wr_size = 0;
  char *i2s_read_buff = (char *)calloc(i2s_read_len, sizeof(char));
  uint8_t *flash_write_buff = (uint8_t *)calloc(i2s_read_len, sizeof(char));

  // Record while button is pressed
  while (digitalRead(Button_Pin) == LOW && flash_wr_size < FLASH_RECORD_SIZE)
  {
    // Read audio data
    i2s_read(I2S_PORT, (void *)i2s_read_buff, i2s_read_len, &bytes_read, portMAX_DELAY);

    // Process and write the data
    I2SAudioRecord_dataScale(flash_write_buff, (uint8_t *)i2s_read_buff, i2s_read_len);
    file.write((const byte *)flash_write_buff, i2s_read_len);

    // Update counters and report progress
    flash_wr_size += i2s_read_len;
    Serial.printf("Sound recording %u bytes\n", flash_wr_size);
  }

  // *** Add this new section to capture the final audio data ***
  // After button is released, capture any remaining audio in the buffer
  Serial.println("Button released - capturing final audio...");

  // Read any remaining audio data in the buffer (do this a few times to ensure we get everything)
  for (int i = 0; i < 3; i++)
  {
    size_t bytes_read = 0;
    i2s_read(I2S_PORT, (void *)i2s_read_buff, i2s_read_len, &bytes_read, 100); // Short timeout

    if (bytes_read > 0)
    {
      I2SAudioRecord_dataScale(flash_write_buff, (uint8_t *)i2s_read_buff, bytes_read);
      file.write((const byte *)flash_write_buff, bytes_read);
      flash_wr_size += bytes_read;
      Serial.printf("Final audio capture: %u bytes\n", bytes_read);
    }
  }

  // Make sure all data is written to the file
  file.flush();

  file.close();
  digitalWrite(isAudioRecording, LOW);

  free(i2s_read_buff);
  free(flash_write_buff);

  Serial.println("Recording completed");
  Serial.printf("Total recorded size: %u bytes\n", flash_wr_size);
  listSPIFFS();
}

void uploadFile()
{
  file = SPIFFS.open(audioRecordfile, FILE_READ);
  if (!file)
  {
    Serial.println("FILE IS NOT AVAILABLE!");
    return;
  }

  Serial.println("===> Upload FILE to Node.js Server");

  HTTPClient client;
  client.begin(serverUploadUrl);
  client.addHeader("Content-Type", "audio/wav");
  int httpResponseCode = client.sendRequest("POST", &file, file.size());
  Serial.print("httpResponseCode : ");
  Serial.println(httpResponseCode);

  if (httpResponseCode == 200)
  {
    String response = client.getString();
    Serial.println("==================== Transcription ====================");
    Serial.println(response);
    Serial.println("====================      End      ====================");
  }
  else
  {
    Serial.println("Server is not available");
  }

  file.close();
  client.end();
}

void waitForResponseAndPlay()
{
  HTTPClient http;
  int maxAttempts = 30;
  bool responseReady = false;

  Serial.println("Waiting for server processing...");

  // Poll server for response readiness
  for (int i = 0; i < maxAttempts; i++)
  {
    http.begin(broadcastPermitionUrl);
    int httpResponseCode = http.GET();

    if (httpResponseCode > 0)
    {
      String payload = http.getString();
      if (payload.indexOf("\"ready\":true") > -1)
      {
        responseReady = true;
        break;
      }
    }

    http.end();
    delay(500);
  }

  if (!responseReady)
  {
    Serial.println("Server response timeout");
    return;
  }

  // Get and play audio
  Serial.println("Playing response...");
  http.begin(serverBroadcastUrl);
  int httpCode = http.GET();

  if (httpCode == HTTP_CODE_OK)
  {
    // Clear the I2S buffer before starting playback
    i2s_zero_dma_buffer(MAX_I2S_NUM);

    WiFiClient *stream = http.getStreamPtr();
    // Skip WAV header (first 44 bytes) which might be causing issues
    uint8_t header_buffer[44];
    int header_bytes_read = 0;
    while (header_bytes_read < 44)
    {
      int len = stream->read(header_buffer + header_bytes_read, 44 - header_bytes_read);
      if (len > 0)
      {
        header_bytes_read += len;
      }
    }
    uint8_t buffer[4096]; // Smaller buffer for more frequent writes
    size_t total_bytes_written = 0;
    int retry_count = 0;
    const int max_retries = 5;

        // Keep track of available data and handle it in chunks
    while (stream->connected() || stream->available() > 0)
    {
      size_t available_bytes = stream->available();

      if (available_bytes == 0)
      {
        // Wait longer for data to arrive
        delay(50);
        retry_count++;
        if (retry_count > max_retries)
          break;
        continue;
      }

      retry_count = 0; // Reset retry counter when data arrives

      // Read a chunk of data
      int len = stream->read(buffer, min(available_bytes, sizeof(buffer)));
      if (len > 0)
      {
        size_t bytes_written = 0;
        // Add retry logic for writing to I2S
        int write_attempts = 0;
        while (bytes_written < len && write_attempts < 3)
        {
          size_t new_bytes;
          i2s_write(MAX_I2S_NUM, buffer + bytes_written, len - bytes_written, &new_bytes, 100);
          bytes_written += new_bytes;
          write_attempts++;
          if (bytes_written < len)
            delay(5);
        }
        total_bytes_written += bytes_written;
      }
    }

    // Make sure all data is played before finishing
    delay(500);
    Serial.printf("Audio playback completed (bytes: %d)\n", total_bytes_written);
  }
  else
  {
    Serial.printf("HTTP GET failed, error: %s\n", http.errorToString(httpCode).c_str());
  }

  http.end();
}

void i2sInitINMP441()
{
  i2s_config_t i2s_config = {
      .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX),
      .sample_rate = I2S_SAMPLE_RATE,
      .bits_per_sample = i2s_bits_per_sample_t(I2S_SAMPLE_BITS),
      .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
      .communication_format = i2s_comm_format_t(I2S_COMM_FORMAT_STAND_I2S),
      .intr_alloc_flags = 0,
      .dma_buf_count = 64,
      .dma_buf_len = 1024,
      .use_apll = 1};

  i2s_driver_install(I2S_PORT, &i2s_config, 0, NULL);

  const i2s_pin_config_t pin_config = {
      .bck_io_num = I2S_SCK,
      .ws_io_num = I2S_WS,
      .data_out_num = -1,
      .data_in_num = I2S_SD};

  i2s_set_pin(I2S_PORT, &pin_config);
}

void i2sInitMax98357A()
{
  i2s_config_t i2s_config = {
      .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_TX),
      .sample_rate = MAX_I2S_SAMPLE_RATE, // 16000 Hz
      .bits_per_sample = i2s_bits_per_sample_t(MAX_I2S_SAMPLE_BITS),
      .channel_format = I2S_CHANNEL_FMT_ONLY_RIGHT, // Try changing to ONLY_RIGHT if still too fast
      .communication_format = I2S_COMM_FORMAT_STAND_I2S,
      .intr_alloc_flags = 0, // ESP_INTR_FLAG_LEVEL1,
      .dma_buf_count = 4,    // 8,
      .dma_buf_len = 1024,   // MAX_I2S_READ_LEN,
      .use_apll = false,
      .tx_desc_auto_clear = true,
      .fixed_mclk = 0};

  i2s_pin_config_t pin_config = {
      .bck_io_num = I2S_BCLK,
      .ws_io_num = I2S_LRC,
      .data_out_num = I2S_DOUT,
      .data_in_num = -1}; // I2S_PIN_NO_CHANGE

  i2s_driver_install(MAX_I2S_NUM, &i2s_config, 0, NULL);
  i2s_set_pin(MAX_I2S_NUM, &pin_config);
  i2s_zero_dma_buffer(MAX_I2S_NUM);
}

void I2SAudioRecord_dataScale(uint8_t *d_buff, uint8_t *s_buff, uint32_t len)
{
  uint32_t j = 0;
  uint32_t dac_value = 0;
  for (int i = 0; i < len; i += 2)
  {
    dac_value = ((((uint16_t)(s_buff[i + 1] & 0xf) << 8) | ((s_buff[i + 0]))));
    d_buff[j++] = 0;
    // Increase amplification factor from 256/2048 to improve volume
    d_buff[j++] = dac_value * 512 / 2048; // Double the amplification
  }
}

void wavHeader(byte *header, int wavSize)
{
  header[0] = 'R';
  header[1] = 'I';
  header[2] = 'F';
  header[3] = 'F';
  unsigned int fileSize = wavSize + headerSize - 8;
  header[4] = (byte)(fileSize & 0xFF);
  header[5] = (byte)((fileSize >> 8) & 0xFF);
  header[6] = (byte)((fileSize >> 16) & 0xFF);
  header[7] = (byte)((fileSize >> 24) & 0xFF);
  header[8] = 'W';
  header[9] = 'A';
  header[10] = 'V';
  header[11] = 'E';
  header[12] = 'f';
  header[13] = 'm';
  header[14] = 't';
  header[15] = ' ';
  header[16] = 0x10;
  header[17] = 0x00;
  header[18] = 0x00;
  header[19] = 0x00;
  header[20] = 0x01;
  header[21] = 0x00;
  header[22] = 0x01;
  header[23] = 0x00;
  header[24] = 0x80; // 16000 & 0xFF
  header[25] = 0x3E; // (16000 >> 8) & 0xFF
  header[26] = 0x00;
  header[27] = 0x00;
  header[28] = 0x00; // 32000 & 0xFF
  header[29] = 0x7D; // (32000 >> 8) & 0xFF
  header[30] = 0x00; // (32000 >> 16) & 0xFF
  header[31] = 0x00;
  header[32] = 0x02;
  header[33] = 0x00;
  header[34] = 0x10;
  header[35] = 0x00;
  header[36] = 'd';
  header[37] = 'a';
  header[38] = 't';
  header[39] = 'a';
  header[40] = (byte)(wavSize & 0xFF);
  header[41] = (byte)((wavSize >> 8) & 0xFF);
  header[42] = (byte)((wavSize >> 16) & 0xFF);
  header[43] = (byte)((wavSize >> 24) & 0xFF);
}

void listSPIFFS(void)
{
  // DEBUG
  printSpaceInfo();
  Serial.println(F("\r\nListing SPIFFS files:"));
  static const char line[] PROGMEM = "=================================================";

  Serial.println(FPSTR(line));
  Serial.println(F("  File name                              Size"));
  Serial.println(FPSTR(line));

  fs::File root = SPIFFS.open("/");
  if (!root)
  {
    Serial.println(F("Failed to open directory"));
    return;
  }
  if (!root.isDirectory())
  {
    Serial.println(F("Not a directory"));
    return;
  }

  fs::File file = root.openNextFile();
  while (file)
  {
    if (file.isDirectory())
    {
      Serial.print("DIR : ");
      String fileName = file.name();
      Serial.print(fileName);
    }
    else
    {
      String fileName = file.name();
      Serial.print("  " + fileName);
      // File path can be 31 characters maximum in SPIFFS
      int spaces = 33 - fileName.length(); // Tabulate nicely
      if (spaces < 1)
        spaces = 1;
      while (spaces--)
        Serial.print(" ");
      String fileSize = (String)file.size();
      spaces = 10 - fileSize.length(); // Tabulate nicely
      if (spaces < 1)
        spaces = 1;
      while (spaces--)
        Serial.print(" ");
      Serial.println(fileSize + " bytes");
    }

    file = root.openNextFile();
  }

  Serial.println(FPSTR(line));
  Serial.println();
  delay(1000);
}

void printSpaceInfo()
{
  size_t totalBytes = SPIFFS.totalBytes();
  size_t usedBytes = SPIFFS.usedBytes();
  size_t freeBytes = totalBytes - usedBytes;

  Serial.print("Total space: ");
  Serial.println(totalBytes);
  Serial.print("Used space: ");
  Serial.println(usedBytes);
  Serial.print("Free space: ");
  Serial.println(freeBytes);
}